state : 리액트 컴포넌트의 상태, 리액트 컴포넌트의 수정 가능한 데이터
- 랜더링이나 데이터 흐름에 사용되는 값만 state에 포함해야 함
- Javascript objectt 타입으로 구성되어 있음
- state도 직접적인 변경이 불가능함 -> (setState() 라는 함수를 사용하여 수정)
- 함수 컴포넌트에서는 hooks 의 하나인 useState() 를 사용하여 수정
- 클래스 컴포넌트에서는 setState() 함수를 사용함

※ 리액트 생명주기 : 리액트 컴포넌트가 생성, 수정, 삭제될 때 실행되는 과정
- 리액트 생명주기에 따라 3개의 메소드가 존재함
- componentDidMount(): 컴포넌트가 생성된 후 실행되는 메소드
- componentDidUpdate(): 컴포넌트의 내용이 수정된 후 실행되는 메소드, setState() 실행 시
- componentWillUnmount(): 컴포넌트가 삭제되기 직전에 실행되는 메소드, 부모 컴포넌트에서 더 이상 자식 컴포넌트를 사용하지 않을 때


※ 리액트에서 사용되는 데이터 종류 2가지
props : 매개변수, 부모 -> 자식 컴포넌트, 읽기전용
state : 수정 가능


※ Hooks : 리액트의 특정 기능이 hook(갈고리)을 걸어서 해당 기능을 사용할 수 있도록 해주는 기능
- 함수 컴포넌트에는 원래 존재하지 않았던 생명주기 함수를 사용할 수 있도록 해주는 기능
- setState 기능을 사용할 수 있도록 해주는 기능
- custom hook을 사용하여 사용자가 필요한 기능을 추가로 생성하여 사용할 수 있음

※ hooks의 규칙 2가지
1. 무조건 최상위 레벨에서만 호출해야 함 (해당 컴포넌트 안에서 최상위 레벨)
  - 반복문이나 조건문 혹은 중첩된 함수 안에서 실행해서는 안됨
  - 컴포넌트가 랜더링 될 때 매번 같은 순서로 호출되어야 함
2. 리액트 함수 컴포넌트에서만 호출해야 함
  - 훅은 클래스 컴포넌트의 불편함을 해결하기 위해서 만들어짐
  - 일반적인 자바스크립트 함수에서 훅을 호출하면 안됨(함수를 사용 안할 수도 있기 때문)

※ useState : 클래스 컴포넌트의 setState를 사용할 수 있도록 하는 hook
- 사용법 : import React.{useState} from 'react';
- const [변수명, set변수명] = useState(초기값);


※ useEffect : 클래스 컴포넌트의 생명주기 함수를 사용할 수 있도록 하는 hook
- useEffect 로 componentDidMount(), componentDidUpdate, componentWillUnmount() 함수의 기능을 다 사용할 수 있음
- 의존성 배열로 지정된 변수의 값이 변경될 경우, 지정한 콜백함수가 실행됨(componentDidUpdate() 기능)
- 의존성 배열을 빈 배열[]로 지정할 경우 컴포넌트 생성 후 지정된 콜백함수가 한번만 실행됨(componentDidMount() 기능)
- useEffect 에서 return 하는 함수는 컴포넌트가 해제될 때 실행됨(componentWillUnmount() 기능)
- useEffect 는 하나의 컴포넌트에서 여러 개 사용해도 상관 없음
- 사용법 : import React, { useEffect } from 'react';
- useEffect(이펙트 콜백 함수, 의존성 배열);


// 문제 1) 버튼 2개를 생성(+, -)하고, useState와 useEffect를 사용하여 볼륨을 조절하는 프로그램을 UI와 이벤트가 동작하도록 작성하세요
// state 변수명 volume
// volume 초기값 = 0, 기본 설정값 5, 최대값은 10으로 설정


※ useRef : 특정 컴포넌트에 접근할 수 있도록 해주는 hook, 레퍼런스를 사용하기 위한 hook
- 레퍼런스란 리액트에서 특정 컴포넌트에 접근할 수 있는 객체를 의미
- 레퍼런스 객체는 current 라는 속성이 존재하고 해당 속성은 현재 참조하고 있는 엘리먼트를 뜻함
- 특정 엘리먼트를 선택할 수 있음(제이쿼리의 $('아이디값')으로 특정 태그를 찾는 것과 비슷)
- 사용법 : import React, {useRef} from 'react';
- const refContainer = useRef(초기값);
- 랜더링 부분의 jsx 문법에 'ref' 속성을 지정하여 사용

























